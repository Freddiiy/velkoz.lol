// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

//Summoner table
model Summoner {
  id            String   @id
  accountId     String   @unique
  puuid         String   @unique
  name          String
  summonerLevel Int
  profileIconId Int
  revisionDate  String
  region        String
  lastUpdated   DateTime @default(now())
}

//Match table
model Match {
  id         String       @id @unique @default(uuid())
  lastUpdated DateTime @default(now())
  matchId    String
  metaData   Metadata?
  info       Info?
}

//Meta table
model Metadata {
  id           String               @id @unique @default(uuid())
  game         Match             @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId       String               @unique
  matchId      String
  dataVersion  String
  participants MetaParticipant[]
}

//MetaParticipant table
model MetaParticipant {
  id              String      @id @unique @default(uuid())
  metaParticipant String
  metadata        Metadata @relation(fields: [metadataId], references: [id], onDelete: Cascade)
  metadataId      String
}

model Info {
  id                 String           @id @unique @default(uuid())
  gameCreation       String
  gameDuration       String
  gameEndTimestamp   String
  gameId             String
  gameMode           String
  gameName           String
  gameStartTimestamp String
  gameType           String
  gameVersion        String
  mapId              Int
  participants       Participant[]
  platformId         String
  queueId            Int
  teams              Team[]
  tournamentCode     String
  match              Match         @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId            String        @unique
}

model Participant {
  id                             String     @id @unique @default(uuid())
  assists                        Int
  baronKills                     Int
  bountyLevel                    Int
  champExperience                Int
  champLevel                     Int
  championId                     Int
  championName                   String
  championTransform              Int
  consumablesPurchased           Int
  damageDealtToBuildings         Int
  damageDealtToObjectives        Int
  damageDealtToTurrets           Int
  damageSelfMitigated            Int
  deaths                         Int
  detectorWardsPlaced            Int
  doubleKills                    Int
  dragonKills                    Int
  firstBloodAssist               Boolean
  firstBloodKill                 Boolean
  firstTowerAssist               Boolean
  firstTowerKill                 Boolean
  gameEndedInEarlySurrender      Boolean
  gameEndedInSurrender           Boolean
  goldEarned                     Int
  goldSpent                      Int
  individualPosition             String
  inhibitorKills                 Int
  inhibitorTakedowns             Int
  inhibitorsLost                 Int
  item0                          Int
  item1                          Int
  item2                          Int
  item3                          Int
  item4                          Int
  item5                          Int
  item6                          Int
  itemsPurchased                 Int
  killingSprees                  Int
  kills                          Int
  lane                           String
  largestCriticalStrike          Int
  largestKillingSpree            Int
  largestMultiKill               Int
  longestTimeSpentLiving         Int
  magicDamageDealt               Int
  magicDamageDealtToChampions    Int
  magicDamageTaken               Int
  neutralMinionsKilled           Int
  nexusKills                     Int
  nexusTakedowns                 Int
  nexusLost                      Int
  objectivesStolen               Int
  objectivesStolenAssists        Int
  participantId                  Int
  pentaKills                     Int
  perks                          Perks?
  physicalDamageDealt            Int
  physicalDamageDealtToChampions Int
  physicalDamageTaken            Int
  profileIcon                    Int
  puuid                          String
  quadraKills                    Int
  riotIdName                     String
  riotIdTagline                  String
  role                           String
  sightWardsBoughtInGame         Int
  spell1Casts                    Int
  spell2Casts                    Int
  spell3Casts                    Int
  spell4Casts                    Int
  summoner1Casts                 Int
  summoner1Id                    Int
  summoner2Casts                 Int
  summoner2Id                    Int
  summonerId                     String
  summonerLevel                  Int
  summonerName                   String
  teamEarlySurrendered           Boolean
  teamId                         Int
  teamPosition                   String
  timeCCingOthers                Int
  timePlayed                     Int
  totalDamageDealt               Int
  totalDamageDealtToChampions    Int
  totalDamageShieldedOnTeammates Int
  totalDamageTaken               Int
  totalHeal                      Int
  totalHealsOnTeammates          Int
  totalMinionsKilled             Int
  totalTimeCCDealt               Int
  totalTimeSpentDead             Int
  totalUnitsHealed               Int
  tripleKills                    Int
  trueDamageDealt                Int
  trueDamageDealtToChampions     Int
  trueDamageTaken                Int
  turretKills                    Int
  turretTakedowns                Int
  turretsLost                    Int
  unrealKills                    Int
  visionScore                    Int
  visionWardsBoughtInGame        Int
  wardsKilled                    Int
  wardsPlaced                    Int
  win                            Boolean
  info                           Info    @relation(fields: [infoId], references: [id], onDelete: Cascade)
  infoId                         String
}

model Perks {
  id            String         @id @unique @default(uuid())
  statPerks     PerkStats?
  styles        PerkStyle[]
  participant   Participant    @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId String         @unique
}

model PerkStats {
  id      String   @id @unique @default(uuid())
  defense Int
  flex    Int
  offense Int
  perks   Perks @relation(fields: [perksId], references: [id], onDelete: Cascade)
  perksId String   @unique
}

model PerkStyle {
  id          String                  @id @unique @default(uuid())
  description String
  selections  PerkStyleSelection[]
  style       Int
  perks       Perks                @relation(fields: [perksId], references: [id], onDelete: Cascade)
  perksId     String
}

model PerkStyleSelection {
  id          String       @id @unique @default(uuid())
  perk        Int
  var1        Int
  var2        Int
  var3        Int
  perkStyle   PerkStyle @relation(fields: [perkStyleId], references: [id], onDelete: Cascade)
  perkStyleId String
}

model Team {
  id         String         @id @unique @default(uuid())
  bans       Ban[]
  objectives Objectives?
  teamId     Int
  win        Boolean
  info       Info        @relation(fields: [infoId], references: [id], onDelete: Cascade)
  infoId     String
}

model Ban {
  id         String  @id @unique @default(uuid())
  championId Int
  pickTurn   Int
  team       Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String
}

model Objectives {
  id         String        @id @default(uuid())
  baron      Objective? @relation("baron", map: "baronId")
  champion   Objective? @relation("champion", map: "championId")
  dragon     Objective? @relation("dragon", map: "dragonId")
  inhibitor  Objective? @relation("inhibitor", map: "inhibitorId")
  riftHerald Objective? @relation("riftHerald", map: "riftHeraldId")
  tower      Objective? @relation("tower", map: "towerId")
  team       Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String     @unique
}

model Objective {
  id           String         @id @unique @default(uuid())
  first        Boolean
  kills        Int
  baron        Objectives? @relation("baron", fields: [baronId], references: [id], onDelete: Cascade)
  baronId      String?     @unique
  champion     Objectives? @relation("champion", fields: [championId], references: [id], onDelete: Cascade)
  championId   String?     @unique
  dragon       Objectives? @relation("dragon", fields: [dragonId], references: [id], onDelete: Cascade)
  dragonId     String?     @unique
  inhibitor    Objectives? @relation("inhibitor", fields: [inhibitorId], references: [id], onDelete: Cascade)
  inhibitorId  String?     @unique
  riftHerald   Objectives? @relation("riftHerald", fields: [riftHeraldId], references: [id], onDelete: Cascade)
  riftHeraldId String?     @unique
  tower        Objectives? @relation("tower", fields: [towerId], references: [id], onDelete: Cascade)
  towerId      String?     @unique
}
